#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <unistd.h> 

int shared_data = 0;
pthread_mutex_t mutex;

void* writer_thread(void* arg) {
    for (int i = 1; i <= 5; i++) {
        pthread_mutex_lock(&mutex);
        shared_data = i;
        printf("Writer Thread: Wrote %d to shared_data\n", shared_data);
        pthread_mutex_unlock(&mutex);
        sleep(1);  //for delay
    }
    pthread_exit(NULL);
}

void* reader_thread(void* arg) {
    int read_val;
    for (int i = 1; i <= 5; i++) {
        //lock mutex 
        pthread_mutex_lock(&mutex);
        read_val = shared_data;
        printf("Reader Thread: Read %d from shared_data\n", read_val);
        // unlock mutex
        pthread_mutex_unlock(&mutex);
        sleep(1);  //delay mutex 
    }
    pthread_exit(NULL);
}

int main() {
    pthread_t writer, reader;
//initialize mutex
    if (pthread_mutex_init(&mutex, NULL) != 0) {
        printf("Mutex initialization failed\n");
        return 1;
    }
//these are for reader and writer threads 
    pthread_create(&writer, NULL, writer_thread, NULL);
    pthread_create(&reader, NULL, reader_thread, NULL);

    pthread_join(writer, NULL);
    pthread_join(reader, NULL);

    pthread_mutex_destroy(&mutex);

    return 0;
}
